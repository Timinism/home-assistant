# Report module
# Provides a report script and a way to manage local and away periodic reports.

automation:

  - alias: Periodic Report
    trigger:
      platform: time
      minutes: '00'
      seconds: 00

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: device_tracker.jmobile
          state: 'home'
        - condition: state
          entity_id: input_boolean.periodic_report
          state: 'on'
    action:
      - service: script.periodic_report

script:

  hourly_pips:
    alias: Hourly Pips
    sequence:

      - condition: template
        value_template: "{{ states.input_boolean.periodic_time.state == 'on' }}"

      - service: script.notify_audio
        data_template:
          notify_fade: True
          notify_audio: "http://192.168.0.51:8123/local/sound/pips.wav"

      - delay: 00:00:03
      - wait_template: "{{ states.script.notify_audio.state == 'off' }}"

  periodic_report:
    alias: Periodic Report
    sequence:

      - service: script.hourly_pips
      - delay: 00:00:03
      - wait_template: "{{ states.script.hourly_pips.state == 'off' }}"

      - condition: template
        value_template: "{{ states.input_boolean.periodic_report.state == 'on' }}"

      - service: script.home_report
        data_template:
          notify_mobile: '{{ False }}'

  home_report:

    alias: Home Report
    sequence:
      - service: script.notify
        data_template:
          # El sol ha salido / se pondrá
          #notify_mobile: False
          notify_text: >
            Son las {{ now().strftime("%H:%M") }}.

            {% set next_sunset = strptime(states.sun.sun.attributes['next_setting'], "%Y-%m-%dT%H:%M:%S") %}
            {% set next_rising = strptime(states.sun.sun.attributes['next_rising'], "%Y-%m-%dT%H:%M:%S") %}
            {% if next_sunset < next_rising %}
              El sol se pondrá a las {{ as_timestamp(strptime(states.sun.sun.attributes['next_setting'], "%Y-%m-%dT%H:%M:%S")) | timestamp_custom("%H:%M")  }}.
            {% else %}
              El sol saldrá a las {{ as_timestamp(strptime(states.sun.sun.attributes['next_rising'], "%Y-%m-%dT%H:%M:%S")) | timestamp_custom("%H:%M")  }}.
            {% endif %}

      - delay: 00:00:02
      - wait_template: "{{ states.script.notify.state == 'off' }}"

      - service: script.notify
        data_template:
          notify_mobile: '{{ notify_mobile }}'
          notify_text: >
            La batería del teléfono está al {{ states.sensor.jmobile_battery.state | round }} por cien.

      - delay: 00:00:02
      - wait_template: "{{ states.script.notify.state == 'off' }}"

      - service: script.notify
        data_template:
          notify_mobile: '{{ notify_mobile }}'
          notify_text: >
            La temperatura en Vigo es de {{ states.sensor.yr_temperature.state | int }} grados.
            La nubosidad es del {{ states.sensor.yr_cloudiness.state | int }} por cien
            y la humedad del {{ states.sensor.yr_humidity.state | int }} por cien.
            {{ states.sensor.yr_temperature.state | int }} grados.

      - delay: 00:00:02
      - wait_template: "{{ states.script.notify.state == 'off' }}"

      - service: script.notify
        data_template:
          notify_mobile: '{{ notify_mobile }}'
          notify_text: >
            El tiempo de casa al trabajo son {{ states.sensor.casa__trabajo.state }} minutos.
            De casa a la finca {{ states.sensor.casa__finca.state }} minutos.

      - delay: 00:00:02
      - wait_template: "{{ states.script.notify.state == 'off' }}"

      # Ignore events too far away
      - service: script.notify
        data_template:
          notify_text: >
            Tus siguientes eventos son...

            {{ states.sensor.template_calendar_jjmontes.state }}.

            {{ states.sensor.template_calendar_work.state }}.
          notify_mobile: '{{ notify_mobile }}'

      - delay: 00:00:02
      - wait_template: "{{ states.script.notify.state == 'off' }}"

      # Alarm clock info: enabled / disabled, time / remaining time
      # Should be a call to "alarm clock report", for it to be reusable

      # Send a famous quote
      - service: script.notify
        data_template:
          notify_text: '{{ states.sensor.quote.state }}'
          notify_mobile: '{{ notify_mobile }}'


